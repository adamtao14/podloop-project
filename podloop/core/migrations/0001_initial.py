# Generated by Django 4.2.1 on 2023-05-09 21:12

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.CharField(default=None, max_length=100, null=True)),
            ],
            options={
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='Episode',
            fields=[
                ('id', models.CharField(max_length=36, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=500)),
                ('uploade_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('audio', models.FileField(upload_to='audios/')),
                ('link_thumbnail', models.CharField(max_length=400, null=True)),
                ('is_private', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name_plural': 'Episodes',
            },
        ),
        migrations.CreateModel(
            name='EpisodeComment',
            fields=[
                ('id', models.CharField(max_length=36, primary_key=True, serialize=False)),
                ('text', models.CharField(max_length=500)),
                ('episode', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.episode')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('parent_comment', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.episodecomment')),
            ],
            options={
                'verbose_name_plural': 'EpisodeComments',
            },
        ),
        migrations.CreateModel(
            name='NotificationType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name_plural': 'NotificationTypes',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Tags',
            },
        ),
        migrations.CreateModel(
            name='Podcast',
            fields=[
                ('id', models.CharField(max_length=36, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=500)),
                ('link_podcast_picture', models.CharField(default=None, max_length=270)),
                ('categories', models.ManyToManyField(related_name='podcasts', to='core.category')),
                ('followers', models.ManyToManyField(related_name='followed_podcasts', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('tags', models.ManyToManyField(related_name='podcasts', to='core.tag')),
            ],
            options={
                'verbose_name_plural': 'Podcasts',
            },
        ),
        migrations.CreateModel(
            name='Playlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('is_private', models.BooleanField(default=False)),
                ('description', models.CharField(blank=True, max_length=200)),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('episodes', models.ManyToManyField(to='core.episode')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Playlists',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('read', models.BooleanField(default=False)),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.notificationtype')),
                ('user_to_notify', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='my_notifications', to=settings.AUTH_USER_MODEL)),
                ('user_who_notifies', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Notifications',
            },
        ),
        migrations.CreateModel(
            name='EpisodeStream',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('episode', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.episode')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'EpisodeStreams',
            },
        ),
        migrations.CreateModel(
            name='EpisodeLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('episode', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.episode')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'EpisodeLikes',
            },
        ),
        migrations.CreateModel(
            name='EpisodeCommentLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.episodecomment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'EpisodeCommentLikes',
            },
        ),
        migrations.AddField(
            model_name='episode',
            name='podcast',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.podcast'),
        ),
        migrations.AddField(
            model_name='episode',
            name='tags',
            field=models.ManyToManyField(related_name='episodes', to='core.tag'),
        ),
        migrations.AddConstraint(
            model_name='episodestream',
            constraint=models.UniqueConstraint(fields=('user', 'episode', 'date'), name='id_stream'),
        ),
        migrations.AddConstraint(
            model_name='episodelike',
            constraint=models.UniqueConstraint(fields=('user', 'episode'), name='id_like'),
        ),
        migrations.AddConstraint(
            model_name='episodecommentlike',
            constraint=models.UniqueConstraint(fields=('user', 'comment'), name='id_comment_like'),
        ),
    ]
